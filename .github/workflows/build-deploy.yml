name: Build and Deploy Code

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    environment:
      name: testing
    env:
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}
      REFRESH_SECRET_KEY: ${{secrets.REFRESH_SECRET_KEY}}
      REFRESH_TOKEN_EXPIRE_MINUTES: ${{secrets.REFRESH_TOKEN_EXPIRE_MINUTES}}
      BROKER_PROTOCOL: ${{secrets.BROKER_PROTOCOL}}
      BROKER_USERNAME: ${{secrets.BROKER_USERNAME}}
      BROKER_PASSWORD: ${{secrets.BROKER_PASSWORD}}
      BROKER_HOST: ${{secrets.BROKER_HOST}}
      BROKER_PORT: ${{secrets.BROKER_PORT}}
      BROKER_VHOST: ${{secrets.BROKER_VHOST}}
      PATH_BACKEND_DIR: ${{secrets.PATH_BACKEND_DIR}}
      EMAIL_SENDER: ${{secrets.EMAIL_SENDER}}
      EMAIL_APP_PASSWORD: ${{secrets.EMAIL_APP_PASSWORD}}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test
          POSTGRES_USER: ${{secrets.DATABASE_USERNAME}}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      rabbitmq:
        image: rabbitmq
        ports:
          - 5672
        env:
          RABBITMQ_DEFAULT_USER: ${{secrets.BROKER_USERNAME}}
          RABBITMQ_DEFAULT_PASS: ${{secrets.BROKER_PASSWORD}}
          RABBITMQ_DEFAULT_VHOST: ${{secrets.BROKER_VHOST}}
    steps:
      - name: Pulling git repo
        uses: actions/checkout@v3
      - name: Install Python version 3.8
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      - name: Update pip
        run: python -m pip install --upgrade pip
      - name: Install all dependencies
        run: pip install -r requirements.txt
        working-directory: ./backend
      - name: Run Automated Tests
        run: pytest
        working-directory: ./backend
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push backend container
        uses: docker/build-push-action@v3
        with:
          context: ./backend
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/todo-backend:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/todo-backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/todo-backend:buildcache,mode=max
      - name: Set Up Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Install node package dependencies
        run: npm install
        working-directory: ./frontend
      - name: Execute test cases
        run: npm run test
        working-directory: ./frontend
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push frontend container
        uses: docker/build-push-action@v3
        with:
          context: ./frontend
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/todo-frontend:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/todo-frontend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/todo-frontend:buildcache,mode=max
      - name: Create test build
        run: npm run build
        working-directory: ./frontend

  deploy:
    runs-on: ubuntu-20.04
    needs: [ build ]
    environment:
      name: production
    env:
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}
      REFRESH_SECRET_KEY: ${{secrets.REFRESH_SECRET_KEY}}
      REFRESH_TOKEN_EXPIRE_MINUTES: ${{secrets.REFRESH_TOKEN_EXPIRE_MINUTES}}
      BROKER_PROTOCOL: ${{secrets.BROKER_PROTOCOL}}
      BROKER_USERNAME: ${{secrets.BROKER_USERNAME}}
      BROKER_PASSWORD: ${{secrets.BROKER_PASSWORD}}
      BROKER_HOST: ${{secrets.BROKER_HOST}}
      BROKER_PORT: ${{secrets.BROKER_PORT}}
      BROKER_VHOST: ${{secrets.BROKER_VHOST}}
      PATH_BACKEND_DIR: ${{secrets.PATH_BACKEND_DIR}}
      EMAIL_SENDER: ${{secrets.EMAIL_SENDER}}
      EMAIL_APP_PASSWORD: ${{secrets.EMAIL_APP_PASSWORD}}
    steps:
      - name: Pulling git repo
        uses: actions/checkout@v4
      - name: deploy to ubuntu server via ssh
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            exec > /home/$USER/deployment_logs.log 2>&1
            echo "Time: $(date). Time and date so know when written to logs."
            export DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
            export DATABASE_HOSTNAME=${{ secrets.DATABASE_HOSTNAME }}
            export DATABASE_PORT=${{ secrets.DATABASE_PORT }}
            export DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
            export DATABASE_NAME=${{ secrets.DATABASE_NAME }}
            cd todo-app/src
            git pull
            cd backend
            activate () {
            . $PWD/venv/bin/activate
            }
        
            activate
            pip3 install -r requirements.txt
            alembic upgrade head
            cd ..
            cd frontend
            npm install
            echo ${{ secrets.PRODUCTION_PASSWORD }} | sudo -S cp -r ./build/* /var/www/garethbreeze-todo-app.xyz/html
            echo "Restarting api service"
            echo ${{ secrets.PRODUCTION_PASSWORD }} | sudo -S systemctl restart backend_api.service
            echo "Restarting celery"
            echo ${{ secrets.PRODUCTION_PASSWORD }} | sudo -S systemctl restart celery.service
            echo "rebooting server"
            
            
